// automatically generated by Xtext
grammar org.xtext.ps3.school.Schooldsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/school" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SchoolDatabase returns SchoolDatabase:
	'SchoolDatabase'
	'{'
		'school' school=School
		('queries' '{' query+=Query ( "," query+=Query)* '}' )?
	'}';











School returns School:
	{School}
	name=EString
	'{'
		('faculties' '{' faculty+=Faculty ( "," faculty+=Faculty)* '}' )?
		('coursesofstudy' '{' courseofstudy+=CourseOfStudy ( "," courseofstudy+=CourseOfStudy)* '}' )?
		('courses' '{' course+=Course ( "," course+=Course)* '}' )?
		('students' '{' student+=Student ( "," student+=Student)* '}' )?
		('teachers' '{' teacher+=Teacher ( "," teacher+=Teacher)* '}' )?
	'}';

Query returns Query:
	{Query}
	'Query'
	'{'
		( type=SchoolElement)?
		('where' where=Where)?
	'}';

Faculty returns Faculty:
	{Faculty}
	'Faculty'
	name=EString
	'{'
		('coursesofstudy' '(' courseofstudy+=[CourseOfStudy|EString] ( "," courseofstudy+=[CourseOfStudy|EString])* ')' )?
	'}';

CourseOfStudy returns CourseOfStudy:
	'CourseOfStudy'
	name=EString
	'{'
		('courses' '(' course+=[Course|EString] ( "," course+=[Course|EString])* ')' )?
		'faculty' faculty=[Faculty|EString]
		('students' '(' student+=[Student|EString] ( "," student+=[Student|EString])* ')' )?
	'}';

Course returns Course:
	'Course'
	name=EString
	'{'
		('courseNumber' courseNumber=EString)?
		('enrolledStudents' '(' enrolledStudent+=[Student|EString] ( "," enrolledStudent+=[Student|EString])* ')' )?
		'taughtBy' taughtBy=[Teacher|EString]
		('courseresults' '{' courseresult+=CourseResult ( "," courseresult+=CourseResult)* '}' )?
	'}';

Student returns Student:
	'Student'
	name=EString
	'{'
		('studentNumber' studentNumber=EString)?
		('enrolledIn' '(' enrolledIn+=[Course|EString] ( "," enrolledIn+=[Course|EString])* ')' )?
		'courseofstudy' courseofstudy=[CourseOfStudy|EString]
	'}';

Teacher returns Teacher:
	{Teacher}
	'Teacher'
	name=EString
	'{'
		('teaches' '(' teaches+=[Course|EString] ( "," teaches+=[Course|EString])* ')' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

CourseResult returns CourseResult:
	'CourseResult'
	'{'
		('grade' grade=EBigInteger)?
		'student' student=[Student|EString]
	'}';

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

Where returns Where:
	'{'
		booleanexpr=BooleanExpr
	'}';

enum SchoolElement returns SchoolElement:
				School = 'School' | Student = 'Student' | Teacher = 'Teacher' | Faculty = 'Faculty' | CourseOfStudy = 'CourseOfStudy' | Course = 'Course';

BooleanExpr returns BooleanExpr:
	{BooleanExpr}
		lhs=EString operator=EString rhs=EString
		('and' and=BooleanExpr)?
		('or' or=BooleanExpr)?;
